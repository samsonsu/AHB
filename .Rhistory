ggplot(t, aes(x = t$X1, y= t$X2)) +
geom_point()
install.packages('ggplot2')
install.packages('ggplot2')
require(ggplot2)
ggplot(off1a, aes(x = off1a$Group.1, y= off1a$Group.2, colour = off1a$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
t = matrix(nrow = 7, ncol = 2)
off1w = off[off$mac == "00:0f:a3:39:e1:c0",]
off1aw = aggregate(off1w, by = list(off1w$posX, off1w$posY), FUN = mean)
off1aw$avgS = off1aw$signal
off1aw = off1aw[,r]
t1 = off1aw[off1aw$avgS == max(off1aw$avgS),]
t[1,] = c(t1$Group.1, t1$Group.2)
off2w = off[off$mac == "00:0f:a3:39:dd:cd",]
off2aw = aggregate(off2w, by = list(off2w$posX, off2w$posY), FUN = mean)
off2aw$avgS = off2aw$signal
off2aw = off2aw[,r]
off2aw[off2aw$avgS == max(off2aw$avgS),]
t2 = off2aw[off2aw$avgS == max(off2aw$avgS),]
t[2,] = c(t2$Group.1, t2$Group.2)
off3w = off[off$mac == "00:14:bf:b1:97:8a",]
off3aw = aggregate(off3w, by = list(off3w$posX, off3w$posY), FUN = mean)
off3aw$avgS = off3aw$signal
off3aw = off3aw[,r]
off3aw[off3aw$avgS == max(off3aw$avgS),]
t3 = off3aw[off3aw$avgS == max(off3aw$avgS),]
t[3,] = c(t3$Group.1, t3$Group.2)
off4w = off[off$mac == "00:14:bf:3b:c7:c6",]
off4aw = aggregate(off4w, by = list(off4w$posX, off4w$posY), FUN = mean)
off4aw$avgS = off4aw$signal
off4aw = off4aw[,r]
off4aw[off4aw$avgS == max(off4aw$avgS),]
t4 = off4aw[off4aw$avgS == max(off4aw$avgS),]
t[4,] = c(t4$Group.1, t4$Group.2)
off5w = off[off$mac == "00:14:bf:b1:97:90",]
off5aw = aggregate(off5w, by = list(off5w$posX, off5w$posY), FUN = mean)
off5aw$avgS = off5aw$signal
off5aw = off5aw[,r]
off5aw[off5aw$avgS == max(off5aw$avgS),]
t5 = off5aw[off5aw$avgS == max(off5aw$avgS),]
t[5,] = c(t5$Group.1, t5$Group.2)
off6w = off[off$mac == "00:14:bf:b1:97:8d",]
off6aw = aggregate(off6w, by = list(off6w$posX, off6w$posY), FUN = mean)
off6aw$avgS = off6aw$signal
off6aw = off6aw[,r]
off6aw[off6aw$avgS == max(off6aw$avgS),]
t6 = off6aw[off6aw$avgS == max(off6aw$avgS),]
t[6,] = c(t6$Group.1, t6$Group.2)
off7w = off[off$mac == "00:14:bf:b1:97:81",]
off7aw = aggregate(off7w, by = list(off7w$posX, off7w$posY), FUN = mean)
off7aw$avgS = off7aw$signal
off7aw = off7aw[,r]
off7aw[off7aw$avgS == max(off7aw$avgS),]
t7 = off7aw[off7aw$avgS == max(off7aw$avgS),]
t[7,] = c(t7$Group.1, t7$Group.2)
t = data.frame(t)
ggplot(t, aes(x = t$X1, y= t$X2)) +
geom_point()
install.packages('ggplot2')
require(ggplot2)
ggplot(off1aw, aes(x = off1aw$Group.1, y= off1aw$Group.2, colour = off1aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off2aw, aes(x = off2aw$Group.1, y= off2aw$Group.2, colour = off2aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off3aw, aes(x = off3aw$Group.1, y= off3aw$Group.2, colour = off3aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off4aw, aes(x = off4aw$Group.1, y= off4aw$Group.2, colour = off4aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off5aw, aes(x = off5aw$Group.1, y= off5aw$Group.2, colour = off5aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off6aw, aes(x = off6aw$Group.1, y= off6aw$Group.2, colour = off6aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off7aw, aes(x = off7aw$Group.1, y= off7aw$Group.2, colour = off7aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
hold = c("Group.1", "Group.2")
a1w = merge(off1aw, off2aw, by.x = hold, by.y=hold)
a2w = merge(a1, off3aw, by.x = hold, by.y=hold)
a3w = merge(a2, off4aw, by.x = hold, by.y=hold)
a4w = merge(a3, off5aw, by.x = hold, by.y=hold)
a5w = merge(a4, off6aw, by.x = hold, by.y=hold)
a6w = merge(a5, off7aw, by.x = hold, by.y=hold)
colnames(a6) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
avgsigs = a6
#Data for the distance matrix of cross validation
distCross = aggregate(avgsigs, by= list(avgsigs$posX, avgsigs$posY), mean)
install.packages("ggplot2")
View(off1w)
? data.frame
ggplot(t, aes(x = t$X1, y= t$X2)) +
geom_point()
ggplot(off1aw, aes(x = off1aw$Group.1, y= off1aw$Group.2, colour = off1aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
ggplot(off2aw, aes(x = off2aw$Group.1, y= off2aw$Group.2, colour = off2aw$avgS)) +
geom_point() +
scale_colour_gradient(low="yellow", high="red")
a4w = merge(a3, off5aw, by.x = hold, by.y=hold)
hold = c("Group.1", "Group.2")
a1w = merge(off1aw, off2aw, by.x = hold, by.y=hold)
a2w = merge(a1w, off3aw, by.x = hold, by.y=hold)
a3w = merge(a2w, off4aw, by.x = hold, by.y=hold)
a4w = merge(a3w, off5aw, by.x = hold, by.y=hold)
a5w = merge(a4w, off6aw, by.x = hold, by.y=hold)
a6w = merge(a5w, off7aw, by.x = hold, by.y=hold)
colnames(a6w) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
avgsigs = a6w
View(avgsigs)
View(off1aw)
txt = readLines("offline.final.trace.txt") #Read the text into R
txt = readLines("offline.final.trace.txt") #Read the text into R
cleanTxt = txt[!grepl('^[#]', txt)] #cleans lines without useful information
killin = function(trest){
return(c(trest[1], strsplit(trest[2], ",")))
}
fixr = function(vec){
return(vec[2:length(vec)])
}
processLine = function(x) {
id = 0
signal = 0
frequency = 0
mode = 0
line = strsplit(x, ";")
responses = 5:length(line[[1]])
char = matrix(nrow = length(responses), ncol = 10)
t = strsplit(line[[1]][1], "t=")[[1]][2]
mac = strsplit(line[[1]][2], "id=")[[1]][2]
pos = strsplit(line[[1]][3], "pos=")[[1]][2]
npos = strsplit(pos, ",")
degree = strsplit(line[[1]][4], "degree=")[[1]][2]
responses = 5:length(line[[1]])
therest = strsplit(line[[1]][responses], "=")
boom = lapply(X = therest, FUN = killin)
for (i in 1:length(responses)){
id = c(id, boom[[i]][1][[1]][1])
signal = c(signal, boom[[i]][2][[1]][1])
frequency = c(frequency, boom[[i]][2][[1]][2])
mode = c(mode, boom[[i]][2][[1]][3])}
id = fixr(id)
signal = fixr(signal)
frequency = fixr(frequency)
mode = fixr(mode)
char[ ,1] = as.character(t)
char[ ,2] = as.character(mac)
char[ ,3] = as.character(npos[[1]][1])
char[ ,4] = as.character(npos[[1]][2])
char[ ,5] = as.character(npos[[1]][3])
char[ ,6] = as.character(degree)
char[ ,7] = as.character(id)
char[ ,8] = as.character(signal)
char[ ,9] = as.character(frequency)
char[ ,10] = as.character(mode)
return(char)
}
#The function roundOrientation rounds the orientation values to the nearest 45 degrees
roundOrientation = function (x) {
if ((x %% 45) >= 22.5) {
return (((x %/% 45)+1) * 45)
}
else {
return ((x %/% 45) * 45)
}
}
cleanData = function(data, keepMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a", "00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81")) {
#Remove all macs that are just noise which do not correspond to the access points
data = data[data$mac == keepMacs, ]
#Turn the appropriate columns into numerics
data$type = as.numeric(levels(data$type))[data$type]
data$signal = as.numeric(levels(data$signal))[data$signal]
data$orientation = as.numeric(levels(data$orientation))[data$orientation]
data$posX = as.numeric(levels(data$posX))[data$posX]
data$posY = as.numeric(levels(data$posY))[data$posY]
#This removes any data that does not have a signal strength
data = data[!is.na(data$signal), ]
#This removes any duplicated values
data = unique(data)
#This removes any Ad Hoc devices
data = data[data$type ==3, ]
#This rounds the data to the nearest 45 degrees
data$roundOrien = sapply(data$orientation, roundOrientation)
return(data)
}
tmp = lapply(cleanTxt, processLine)
offline = as.data.frame(do.call("rbind", tmp))
names(offline) = c("time", "scanMac", "posX", "posY", "posZ", "orientation", "mac", "signal", "channel", "type")
off = cleanData(offline)
r = c(“Group.1”, “Group.2”, “roundOrien”, “avgS”)
off1 = off[off$mac == "00:0f:a3:39:e1:c0",]
off1a = aggregate(off1, by = list(off1$posX, off1$posY, off1$roundOrien), FUN = mean)
off1a$avgS = off1a$signal
off1a = off1a[,r]
off2 = off[off$mac == "00:0f:a3:39:dd:cd",]
off2a =aggregate(off2, by = list(off2$posX, off2$posY, off2$roundOrien), FUN = mean)
off2a$avgS = off2a$signal
off2a = off2a[,r]
off3 = off[off$mac == "00:14:bf:b1:97:8a",]
off3a =aggregate(off3, by = list(off3$posX, off3$posY, off3$roundOrien), FUN = mean)
off3a = off3a[,r]
off4 = off[off$mac == "00:14:bf:3b:c7:c6",]or
off4a = aggregate(off4, by = list(off4$posX, off4$posY, off4$roundOrien), FUN = mean)
off4a$avgS = off4a$signal
off4a = off4a[,r]
off5 = off[off$mac == "00:14:bf:b1:97:8d",]
off5a = aggregate(off5, by = list(off5$posX, off5$posY, off5$roundOrien), FUN = mean)
off5a$avgS = off5a$signal
off5a = off5a[,r]
off6 = off[off$mac == "00:14:bf:b1:97:81",]
off6a = aggregate(off6, by = list(off6$posX, off6$posY, off6$roundOrien), FUN = mean)
off6a$avgS = off6a$signal
off6a = off6a[,r]
off7 = off[off$mac == "00:14:bf:b1:97:90",]
off7a = aggregate(off7, by = list(off7$posX, off7$posY, off7$roundOrien), FUN = mean)
off7a$avgS = off7a$signal
off7a = off7a[,r]
hold = c("Group.1", "Group.2", "roundOrien")
a1 = merge(off1a, off2a, by.x = hold, by.y=hold)
a2 = merge(a1, off3a, by.x = hold, by.y=hold)
a3 = merge(a2, off4a, by.x = hold, by.y=hold)
a4 = merge(a3, off5a, by.x = hold, by.y=hold)
a5 = merge(a4, off6a, by.x = hold, by.y=hold)
a6 = merge(a5, off7a, by.x = hold, by.y=hold)
colnames(a6) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
avgsigs = a6
r = c("Group.1", "Group.2", "roundOrien", "avgS")
off1 = off[off$mac == "00:0f:a3:39:e1:c0",]
off1a = aggregate(off1, by = list(off1$posX, off1$posY, off1$roundOrien), FUN = mean)
off1a$avgS = off1a$signal
off1a = off1a[,r]
off2 = off[off$mac == "00:0f:a3:39:dd:cd",]
off2a =aggregate(off2, by = list(off2$posX, off2$posY, off2$roundOrien), FUN = mean)
off2a$avgS = off2a$signal
off2a = off2a[,r]
off3 = off[off$mac == "00:14:bf:b1:97:8a",]
off3a =aggregate(off3, by = list(off3$posX, off3$posY, off3$roundOrien), FUN = mean)
off3a = off3a[,r]
off4 = off[off$mac == "00:14:bf:3b:c7:c6",]or
off4a = aggregate(off4, by = list(off4$posX, off4$posY, off4$roundOrien), FUN = mean)
off4a$avgS = off4a$signal
off4a = off4a[,r]
off5 = off[off$mac == "00:14:bf:b1:97:8d",]
off5a = aggregate(off5, by = list(off5$posX, off5$posY, off5$roundOrien), FUN = mean)
off5a$avgS = off5a$signal
off5a = off5a[,r]
off6 = off[off$mac == "00:14:bf:b1:97:81",]
off6a = aggregate(off6, by = list(off6$posX, off6$posY, off6$roundOrien), FUN = mean)
off6a$avgS = off6a$signal
off6a = off6a[,r]
off7 = off[off$mac == "00:14:bf:b1:97:90",]
off7a = aggregate(off7, by = list(off7$posX, off7$posY, off7$roundOrien), FUN = mean)
off7a$avgS = off7a$signal
off7a = off7a[,r]
hold = c("Group.1", "Group.2", "roundOrien")
a1 = merge(off1a, off2a, by.x = hold, by.y=hold)
a2 = merge(a1, off3a, by.x = hold, by.y=hold)
a3 = merge(a2, off4a, by.x = hold, by.y=hold)
a4 = merge(a3, off5a, by.x = hold, by.y=hold)
a5 = merge(a4, off6a, by.x = hold, by.y=hold)
a6 = merge(a5, off7a, by.x = hold, by.y=hold)
colnames(a6) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
avgsigs = a6
a1 = merge(off1a, off2a, by.x = hold, by.y=hold)
a2 = merge(a1, off3a, by.x = hold, by.y=hold)
a3 = merge(a2, off4a, by.x = hold, by.y=hold)
head(off4a)
off3 = off[off$mac == "00:14:bf:b1:97:8a",]
off3a =aggregate(off3, by = list(off3$posX, off3$posY, off3$roundOrien), FUN = mean)
off3a$avgS = off3a$signal
off3a = off3a[,r]
off4 = off[off$mac == "00:14:bf:3b:c7:c6",]
off4a = aggregate(off4, by = list(off4$posX, off4$posY, off4$roundOrien), FUN = mean)
off4a$avgS = off4a$signal
off4a = off4a[,r]
head(off4a)
off5 = off[off$mac == "00:14:bf:b1:97:8d",]
off5a = aggregate(off5, by = list(off5$posX, off5$posY, off5$roundOrien), FUN = mean)
off5a$avgS = off5a$signal
off5a = off5a[,r]
off6 = off[off$mac == "00:14:bf:b1:97:81",]
off6a = aggregate(off6, by = list(off6$posX, off6$posY, off6$roundOrien), FUN = mean)
off6a$avgS = off6a$signal
off6a = off6a[,r]
off7 = off[off$mac == "00:14:bf:b1:97:90",]
off7a = aggregate(off7, by = list(off7$posX, off7$posY, off7$roundOrien), FUN = mean)
off7a$avgS = off7a$signal
off7a = off7a[,r]
hold = c("Group.1", "Group.2", "roundOrien")
a1 = merge(off1a, off2a, by.x = hold, by.y=hold)
a2 = merge(a1, off3a, by.x = hold, by.y=hold)
a3 = merge(a2, off4a, by.x = hold, by.y=hold)
a4 = merge(a3, off5a, by.x = hold, by.y=hold)
a5 = merge(a4, off6a, by.x = hold, by.y=hold)
a6 = merge(a5, off7a, by.x = hold, by.y=hold)
colnames(a6) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
avgsigs = a6
t = matrix(nrow = 7, ncol = 2)
off1w = off[off$mac == "00:0f:a3:39:e1:c0",]
off1aw = aggregate(off1w, by = list(off1w$posX, off1w$posY), FUN = mean)
off1aw$avgS = off1aw$signal
off1aw = off1aw[,r]
t1 = off1aw[off1aw$avgS == max(off1aw$avgS),]
t[1,] = c(t1$Group.1, t1$Group.2)
off2w = off[off$mac == "00:0f:a3:39:dd:cd",]
off2aw = aggregate(off2w, by = list(off2w$posX, off2w$posY), FUN = mean)
off2aw$avgS = off2aw$signal
off2aw = off2aw[ ,r]
off2aw[off2aw$avgS == max(off2aw$avgS),]
t2 = off2aw[off2aw$avgS == max(off2aw$avgS),]
t[2,] = c(t2$Group.1, t2$Group.2)
off3w = off[off$mac == "00:14:bf:b1:97:8a",]
off3aw = aggregate(off3w, by = list(off3w$posX, off3w$posY), FUN = mean)
off3aw$avgS = off3aw$signal
off3aw = off3aw[,r]
off3aw[off3aw$avgS == max(off3aw$avgS),]
t3 = off3aw[off3aw$avgS == max(off3aw$avgS),]
t[3,] = c(t3$Group.1, t3$Group.2)
off4w = off[off$mac == "00:14:bf:3b:c7:c6",]
off4aw = aggregate(off4w, by = list(off4w$posX, off4w$posY), FUN = mean)
off4aw$avgS = off4aw$signal
off4aw = off4aw[,r]
off4aw[off4aw$avgS == max(off4aw$avgS),]
t4 = off4aw[off4aw$avgS == max(off4aw$avgS),]
t[4,] = c(t4$Group.1, t4$Group.2)
off5w = off[off$mac == "00:14:bf:b1:97:90",]
off5aw = aggregate(off5w, by = list(off5w$posX, off5w$posY), FUN = mean)
off5aw$avgS = off5aw$signal
off5aw = off5aw[,r]
off5aw[off5aw$avgS == max(off5aw$avgS),]
t5 = off5aw[off5aw$avgS == max(off5aw$avgS),]
t[5,] = c(t5$Group.1, t5$Group.2)
off6w = off[off$mac == "00:14:bf:b1:97:8d",]
off6aw = aggregate(off6w, by = list(off6w$posX, off6w$posY), FUN = mean)
off6aw$avgS = off6aw$signal
off6aw = off6aw[,r]
off6aw[off6aw$avgS == max(off6aw$avgS),]
t6 = off6aw[off6aw$avgS == max(off6aw$avgS),]
t[6,] = c(t6$Group.1, t6$Group.2)
off7w = off[off$mac == "00:14:bf:b1:97:81",]
off7aw = aggregate(off7w, by = list(off7w$posX, off7w$posY), FUN = mean)
off7aw$avgS = off7aw$signal
off7aw = off7aw[,r]
off7aw[off7aw$avgS == max(off7aw$avgS),]
t7 = off7aw[off7aw$avgS == max(off7aw$avgS),]
t[7,] = c(t7$Group.1, t7$Group.2)
t = data.frame(t)
head(t)
off7w = off[off$mac == "00:14:bf:b1:97:81",]
off7aw = aggregate(off7w, by = list(off7w$posX, off7w$posY), FUN = mean)
off7aw$avgS = off7aw$signal
off7aw = off7aw[,r]
off7aw[off7aw$avgS == max(off7aw$avgS),]
t7 = off7aw[off7aw$avgS == max(off7aw$avgS),]
t[7,] = c(t7$Group.1, t7$Group.2)
t = data.frame(t)
t
hold = c("Group.1", "Group.2")
a1w = merge(off1aw, off2aw, by.x = hold, by.y=hold)
a2w = merge(a1w, off3aw, by.x = hold, by.y=hold)
a3w = merge(a2w, off4aw, by.x = hold, by.y=hold)
a4w = merge(a3w, off5aw, by.x = hold, by.y=hold)
a5w = merge(a4w, off6aw, by.x = hold, by.y=hold)
a6w = merge(a5w, off7aw, by.x = hold, by.y=hold)
colnames(a6w) = c("posX", "posY", "roundOrien", "s1", "s2", "s3", "s4","s5","s6","s7")
a6w = a6w[,c(1,2,4,6,8,10,12,14,16)]
avgsigsw = a6w
names(avgsigsw) = c("posX", "posY", "SS1", "SS2", "SS3", "SS4", "SS5", "SS6", "SS7")
head(avgsigsw)
test = c("hellomynameis", "ahhhhomgomgomg")
strsplit(test)
? strsplit
strsplit(test[1])
strsplit(test, "i")
strsplit(test, "o")
hold = strsplit(test, "o")
class(hold[1])
class(hold[[1]])
length(hold[[1]])
hold[[1]]
x = list
x
x[1] = list(c(1,2,3))
x[[1]] = list(c(1,2,3))
x
x[1]
x[1] = 1
x[[1]] = 1
x = list(length = 2)
x
x[[1]] = list(c(1,2,3))
x
x[1] = list(c(1,2,3))
x
x[2] = c(5)
x
lapply(x, mean)
x
x[1] = list(c(1,2,3))
x
x[3]
x[3] = matrix(c(1,2,3,4), nrow = 2)
x= list(length = 3)
x[1] = list(c(1,2,3))
x[2] = 5
x[3] = matrix(c(1,2,3,4), nrow = 2)
x
x[[3]] = matrix(c(1,2,3,4), nrow = 2)
x
x[1]
class(x[1])
class(x[[1]])
tapply(x, mean)
lapply(x,mean)
x
lapply(x,mean)
mean(x[[3]])
x
a= 1:10
matrix(a, nrow=5)
c =matrix(a, nrow=5)
apply(c, c(1,2), mean)
apply(c, 1, mean)
apply(c, 2, mean)
apply(c, c(1,2), mean)
?apply
add = function(x) {x = x+1 return x}
add = function(x) {x = x+1 return (x)}
add = function(x) {a = x+1 return (a)}
add = function(x) {(a = x+1) return (a)}
apply(c, c(1,2), function(x) {x+1})
apply(c, c(1,2), function(x) {x+1})
a = apply(c, c(1,2), function(x) {x+1})
apply(a, c(1,2), mean)
a+1
? replicate
replicate(3, sample(2))
sample(5)
replicate(3, sample(5))
library(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("06_tabsets")
runExample("07_widgets")
library(shiny)
runExample("06_tabsets") #radio buttons
runExample("01_hello")
runExample("07_widgets") #different because nothing happens until you submit the changes.
library(shiny)
runApp(BeeApp)
runApp("BeeApp")
getwd
setwd(dir)
setwd(/Documents)
setwd(Users/Allison Vuong/Documents)
setwd("~/StatProj/ahb/BeeApp")
library(shiny)
runApp("BeeApp")
runApp(BeeApp)
setwd("~/StatProj/ahb")
library(shiny)
runApp(BeeApp)
runApp("BeeApp")
runExample("07_widgets") #different because nothing happens until you submit the changes.
library(shiny)
runApp("BeeApp")
runExample("02_text")
bee = read.table("beedata.csv", sep=",", header=TRUE)
hist(bee$Transit.Time, breaks=seq(0, 21, by=2), prob = TRUE, main = "Histogram of Estimated Transit Times",
xlab = "Estimated transit time (mo per 100 km)", ylab = "Frequency")
# lines(density(bee$Transit.Time), lwd = 2, col = "blue")
qqnorm(y=bee$Transit.Time)
qqline(y = bee$Transit.Time)
#we see that if we would just use a normal distribution, the normal distribution
#would understate the extreme positive values of x
#install.packages("MASS")
library(MASS)
normest = fitdistr(bee$Transit.Time, "normal")
curve(dnorm(x, normest$estimate[1], normest$estimate[2]), add=TRUE, col='red')
gammaest = fitdistr(bee$Transit.Time, densfun="gamma")
curve(dgamma(x, gammaest$estimate[1], gammaest$estimate[2]), add=TRUE, col='blue')
legend("topright", cex=0.75, pch=16,
col=c("red", "blue"), legend=c("Normal Dist", "Gamma Dist"))
#curve(dgamma(x= BeeTable$Transit.Time, shape=2, scale=1.5), from= 0, to = 20, main = "Gamma Distribution")
# dgamma(x= bee$Transit.Time, shape=1, scale=1.5)
#make a slider thingy to adjust the shape and the scale
library("")
#Next, need to make tutorial and teach about what a gamma distribution is and why the normal curve is not a good
#fit for this data
#Put onto a shiny package with little button and slider thingies
#one check box for normal or gamma dist
#one slider for changing the gamma parameters maybe? <--would need to know how to choose
#best parameters...
#somehow need to figure out how to make it interactive
bee = read.table("beedata.csv", sep=",", header=TRUE)
hist(bee$Transit.Time, breaks=seq(0, 21, by=2), prob = TRUE, main = "Histogram of Estimated Transit Times",
xlab = "Estimated transit time (mo per 100 km)", ylab = "Frequency")
View(bee)
xlab = "Estimated transit time (mo per 100 km)", ylab = "Frequency")
bee = read.table("beedata.csv", sep=",", header=TRUE)
end.rcode-->
library(shiny)
runApp("BeeApp")
shiny::runApp('BeeApp')
